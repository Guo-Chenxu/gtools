// Code generated by hertz generator.

package gtools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"

	"gtools/biz/handler"
	"gtools/consts"
	"gtools/dal/redis"
	"gtools/utils"
)

func rootMw() []app.HandlerFunc {
	// your code...
	return []app.HandlerFunc{
		ReqRespLogMiddleware(),
	}
}

type RequestInfo struct {
	Route  string `json:"route"`
	Params string `json:"params"`
}

func ReqRespLogMiddleware() app.HandlerFunc {
	return func(ctx context.Context, c *app.RequestContext) {
		// 记录请求时间
		beginAt := time.Now()
		method := string(c.Method())
		req := &RequestInfo{
			Route: c.FullPath(),
		}
		if method == "GET" {
			params := c.Request.URI().QueryString()
			req.Params = string(params)
		}
		if method == "POST" {
			body := c.Request.Body()
			req.Params = string(body)
		}
		// 打印请求信息
		hlog.CtxInfof(ctx, "Request rout:%s, Method:%s, RequestBody:%s", req.Route, method, req.Params)
		// 执行请求处理程序和其他中间件函数
		c.Next(ctx)
		hlog.CtxInfof(ctx, "Response rout:%v, code:%v, cost:%v", req.Route, c.Response.StatusCode(), utils.TimeSub(beginAt))
	}
}

func _apiMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _toolsMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _addvisitorinfoMw() []app.HandlerFunc {
	// your code...
	return []app.HandlerFunc{
		VisitorInfoFilterMiddleware(),
	}
}

// 过滤请求
func VisitorInfoFilterMiddleware() app.HandlerFunc {
	return func(ctx context.Context, c *app.RequestContext) {
		req := make(map[string]interface{})

		err := json.Unmarshal(c.Request.Body(), &req)
		if err != nil {
			hlog.CtxErrorf(ctx, "访客信息请求解析失败 err = %v", err)
			c.AbortWithStatusJSON(200, handler.BaseResponse{
				Code: consts.ParamBindJsonError.Code,
				Msg:  consts.ParamBindJsonError.Msg,
			})
		}

		if !req[consts.IsVisitorInfoSuccess].(bool) {
			hlog.CtxErrorf(ctx, "访客信息接口请求不成功 req = %v", req)
			c.AbortWithStatusJSON(200, handler.BaseResponse{
				Code: consts.RetParamError.Code,
				Msg:  consts.RetParamError.Msg,
			})
		}

		// 判断存在标准：week + ip + location + browser + browser_ver + system + path
		var builder strings.Builder
		for _, k := range consts.VisitorInfoKey {
			builder.WriteString(req[k].(string))
		}
		redisKey := fmt.Sprintf(consts.RedisVisitorKeyPrefix, utils.StrToMd5(builder.String()))
		hlog.CtxInfof(ctx, "redisKey = %v", redisKey)
		if redis.KeyExists(ctx, redisKey) {
			hlog.CtxInfof(ctx, "访客信息已存在，无需入库，刷新访客信息过期时间")
			redis.KeySet(ctx, redisKey, "", consts.RedisVisitorInfoExpireTime)
			c.AbortWithStatusJSON(200, handler.BaseResponse{
				Code: consts.VistorInfoExistError.Code,
				Msg:  consts.VistorInfoExistError.Msg,
			})
		}

		redis.KeySet(ctx, redisKey, "", consts.RedisVisitorInfoExpireTime)
		c.Next(ctx)
	}
}

func _sendemailMw() []app.HandlerFunc {
	// your code...
	return nil
}
