// Code generated by hertz generator.

package gtools

import (
	"context"

	"gtools/biz/handler"
	gtools "gtools/biz/model/gtools"
	"gtools/consts"
	"gtools/service"

	"github.com/cloudwego/hertz/pkg/app"
)

// SendEmail .
// @router /api/tools/send_email [POST]
func SendEmail(ctx context.Context, c *app.RequestContext) {
	base := handler.BaseHandler{}
	var err error
	var req gtools.SendEmailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		base.ErrorResponse(ctx, c, &consts.ParamBindJsonError, nil)
		return
	}

	resp := new(gtools.SendEmailResp)
	if bizErr := service.SendEmail(ctx, &req); bizErr != nil {
		base.ErrorResponse(ctx, c, bizErr, false)
		return
	}

	resp.Code, resp.Msg, resp.Data = consts.ResSuccess.Code, consts.ResSuccess.Msg, true
	base.SuccessResponse(c, resp)
}

// AddVisitorInfo .
// @router /api/tools/add_visitor_info [POST]
func AddVisitorInfo(ctx context.Context, c *app.RequestContext) {
	base := handler.BaseHandler{}
	var err error
	var req gtools.AddVisitorInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		base.ErrorResponse(ctx, c, &consts.ParamBindJsonError, nil)
		return
	}

	resp := new(gtools.AddVisitorInfoResp)
	if bizErr := service.AddVisitorInfo(ctx, &req); bizErr != nil {
		base.ErrorResponse(ctx, c, bizErr, false)
		return
	}

	resp.Code, resp.Msg, resp.Data = consts.ResSuccess.Code, consts.ResSuccess.Msg, true
	base.SuccessResponse(c, resp)
}
